#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WpFKPTelyakov
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="telyakovKP")]
	public partial class dcAbiturDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Определения метода расширяемости
    partial void OnCreated();
    partial void InsertAbityrients(Abityrients instance);
    partial void UpdateAbityrients(Abityrients instance);
    partial void DeleteAbityrients(Abityrients instance);
    #endregion
		
		public dcAbiturDataContext() : 
				base(global::WpFKPTelyakov.Properties.Settings.Default.db, mappingSource)
		{
			OnCreated();
		}
		
		public dcAbiturDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dcAbiturDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dcAbiturDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public dcAbiturDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Abityrients> Abityrients
		{
			get
			{
				return this.GetTable<Abityrients>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Abityrients")]
	public partial class Abityrients : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID_abit;
		
		private string _kod_LD;
		
		private string _Familiy;
		
		private string _Name;
		
		private string _Otchestvo;
		
		private string _Pol;
		
		private string _Data_rozdeniy;
		
		private string _Phone;
		
		private string _Snils;
		
		private string _Vibor_special;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnID_abitChanging(int value);
    partial void OnID_abitChanged();
    partial void Onkod_LDChanging(string value);
    partial void Onkod_LDChanged();
    partial void OnFamiliyChanging(string value);
    partial void OnFamiliyChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnOtchestvoChanging(string value);
    partial void OnOtchestvoChanged();
    partial void OnPolChanging(string value);
    partial void OnPolChanged();
    partial void OnData_rozdeniyChanging(string value);
    partial void OnData_rozdeniyChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnSnilsChanging(string value);
    partial void OnSnilsChanged();
    partial void OnVibor_specialChanging(string value);
    partial void OnVibor_specialChanged();
    #endregion
		
		public Abityrients()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[ID abit]", Storage="_ID_abit", AutoSync=AutoSync.Always, DbType="Int NOT NULL IDENTITY", IsDbGenerated=true)]
		public int ID_abit
		{
			get
			{
				return this._ID_abit;
			}
			set
			{
				if ((this._ID_abit != value))
				{
					this.OnID_abitChanging(value);
					this.SendPropertyChanging();
					this._ID_abit = value;
					this.SendPropertyChanged("ID_abit");
					this.OnID_abitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[kod LD]", Storage="_kod_LD", DbType="NVarChar(255) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string kod_LD
		{
			get
			{
				return this._kod_LD;
			}
			set
			{
				if ((this._kod_LD != value))
				{
					this.Onkod_LDChanging(value);
					this.SendPropertyChanging();
					this._kod_LD = value;
					this.SendPropertyChanged("kod_LD");
					this.Onkod_LDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Familiy", DbType="NVarChar(255)")]
		public string Familiy
		{
			get
			{
				return this._Familiy;
			}
			set
			{
				if ((this._Familiy != value))
				{
					this.OnFamiliyChanging(value);
					this.SendPropertyChanging();
					this._Familiy = value;
					this.SendPropertyChanged("Familiy");
					this.OnFamiliyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(255)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Otchestvo", DbType="NVarChar(255)")]
		public string Otchestvo
		{
			get
			{
				return this._Otchestvo;
			}
			set
			{
				if ((this._Otchestvo != value))
				{
					this.OnOtchestvoChanging(value);
					this.SendPropertyChanging();
					this._Otchestvo = value;
					this.SendPropertyChanged("Otchestvo");
					this.OnOtchestvoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pol", DbType="NVarChar(255)")]
		public string Pol
		{
			get
			{
				return this._Pol;
			}
			set
			{
				if ((this._Pol != value))
				{
					this.OnPolChanging(value);
					this.SendPropertyChanging();
					this._Pol = value;
					this.SendPropertyChanged("Pol");
					this.OnPolChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Data rozdeniy]", Storage="_Data_rozdeniy", DbType="NVarChar(255)")]
		public string Data_rozdeniy
		{
			get
			{
				return this._Data_rozdeniy;
			}
			set
			{
				if ((this._Data_rozdeniy != value))
				{
					this.OnData_rozdeniyChanging(value);
					this.SendPropertyChanging();
					this._Data_rozdeniy = value;
					this.SendPropertyChanged("Data_rozdeniy");
					this.OnData_rozdeniyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="NVarChar(255)")]
		public string Phone
		{
			get
			{
				return this._Phone;
			}
			set
			{
				if ((this._Phone != value))
				{
					this.OnPhoneChanging(value);
					this.SendPropertyChanging();
					this._Phone = value;
					this.SendPropertyChanged("Phone");
					this.OnPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Snils", DbType="NVarChar(255)")]
		public string Snils
		{
			get
			{
				return this._Snils;
			}
			set
			{
				if ((this._Snils != value))
				{
					this.OnSnilsChanging(value);
					this.SendPropertyChanging();
					this._Snils = value;
					this.SendPropertyChanged("Snils");
					this.OnSnilsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Vibor special]", Storage="_Vibor_special", DbType="NVarChar(255)")]
		public string Vibor_special
		{
			get
			{
				return this._Vibor_special;
			}
			set
			{
				if ((this._Vibor_special != value))
				{
					this.OnVibor_specialChanging(value);
					this.SendPropertyChanging();
					this._Vibor_special = value;
					this.SendPropertyChanged("Vibor_special");
					this.OnVibor_specialChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
